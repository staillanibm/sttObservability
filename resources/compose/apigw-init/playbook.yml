---
- name: API gateway init playbook
  hosts: localhost
  gather_facts: no

  vars:
    api_url: "{{ lookup('env', 'ROOT_URL') }}"
    api_user: "{{ lookup('env', 'APIGW_USER') }}"  
    api_password: "{{ lookup('env', 'APIGW_PASSWORD') }}"
    zip_folder: "{{ lookup('env', 'ZIP_FOLDER') }}"

  tasks:
    - name: Wait for the API gateway to be ready
      uri:
        url: "{{ api_url }}/health/all"
        method: GET
        status_code: 200
        user: "{{ api_user }}"
        password: "{{ api_password }}"
        force_basic_auth: yes
        return_content: yes
        validate_certs: no
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: wait_result_response
      until: wait_result_response.status == 200
      retries: 30  
      delay: 10   
      timeout: 30 

    - name: Gather facts
      setup:

    - name: Lookup the zip files
      ansible.builtin.find:
        paths: "{{ zip_folder }}"
        patterns: "*.zip"
      register: zip_files

    - name: Import each zip file using curl
      command: >
        curl -u "{{ api_user }}:{{ api_password }}" -H "Accept: application/json"
        -F "file=@{{ item.path }}"
        "{{ api_url }}/archive?overwrite=*"
      loop: "{{ zip_files.files }}"
      register: curl_api_responses
      loop_control:
        label: "{{ item.path }}"
      when: zip_files.matched > 0

    - name: Display the detailed report
      debug:
        var: curl_api_responses

    - name: Initialize parsed_curl_api_responses
      set_fact:
        parsed_curl_api_responses: []

    - name: Parse API response JSON with file name
      set_fact:
        parsed_curl_api_responses: "{{ parsed_curl_api_responses | default([]) + [{
          'fileName': item.item.path,
          'response': item.stdout | from_json
        }] }}"
      loop: "{{ curl_api_responses.results }}"
      when: item.stdout is defined

    - name: Display the detailed report
      debug:
        var: parsed_curl_api_responses

    - name: Get the list of applications
      uri:
        url: "{{ api_url }}/applications"
        method: GET
        status_code: 200
        user: "{{ api_user }}"
        password: "{{ api_password }}"
        force_basic_auth: yes
        return_content: yes
        validate_certs: no
        headers:
          Accept: "application/json"
      register: applications_response

    - name: Fail if 'demo-app' not found
      fail:
        msg: "No application named 'demo-app' was found in the response!"
      when: >
        (applications_response.json.applications | selectattr('name','equalto','demo-app') | list | length) == 0

    - name: Extract the apiAccessKey for 'demo-app'
      set_fact:
        demo_app_access_key: "{{ (applications_response.json.applications 
                                  | selectattr('name','equalto','demo-app') 
                                  | list).0.accessTokens.apiAccessKey_credentials.apiAccessKey }}"

    - name: Display the Access Key
      debug:
        msg: "The Access Key for 'demo-app' is: {{ demo_app_access_key }}"

